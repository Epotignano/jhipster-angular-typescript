/**
 * Created by mmasuyama on 10/22/2015.
 */
var Onesnap;
(function (Onesnap) {
    var StreamsService = (function () {
        /** @ngInject */
        function StreamsService() {
            this.streams = {};
            this.generalListeners = [];
            this.defaultEvents = { 'COLLECTION_LOADED': 'cloaded', 'COLLECTION_OBJECT_REMOVED': 'coremoved', 'OBJECT_CREATE': 'ocreated', 'OBJECT_LOAD': 'oloaded', 'OBJECT_UPDATE': 'oupdated', 'OBJECT_DELETE': 'odeleted' };
        }
        StreamsService.prototype.setStream = function (streamKey, stream) {
            if (!this.streams[streamKey]) {
                this.streams[streamKey] = stream;
                this.generalListeners.forEach(function (listener) {
                    listener.onNext(stream);
                });
            }
        };
        StreamsService.prototype.setGeneralListener = function (thread) {
            this.generalListeners.push(thread);
        };
        StreamsService.prototype.getGeneralListener = function () {
        };
        StreamsService.prototype.getStream = function (streamKey) {
            if (!this.streams[streamKey]) {
                this.setStream(streamKey, new Rx.Subject());
            }
            ;
            return this.streams[streamKey];
        };
        StreamsService.prototype.getStreams = function () {
            return this.streams;
        };
        return StreamsService;
    })();
    Onesnap.StreamsService = StreamsService;
    angular.module('springTestApp').service('StreamsService', StreamsService);
})(Onesnap || (Onesnap = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbnMvc3Vic2NyaXB0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIk9uZXNuYXAiLCJPbmVzbmFwLlN0cmVhbXNTZXJ2aWNlIiwiT25lc25hcC5TdHJlYW1zU2VydmljZS5jb25zdHJ1Y3RvciIsIk9uZXNuYXAuU3RyZWFtc1NlcnZpY2Uuc2V0U3RyZWFtIiwiT25lc25hcC5TdHJlYW1zU2VydmljZS5zZXRHZW5lcmFsTGlzdGVuZXIiLCJPbmVzbmFwLlN0cmVhbXNTZXJ2aWNlLmdldEdlbmVyYWxMaXN0ZW5lciIsIk9uZXNuYXAuU3RyZWFtc1NlcnZpY2UuZ2V0U3RyZWFtIiwiT25lc25hcC5TdHJlYW1zU2VydmljZS5nZXRTdHJlYW1zIl0sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUdILElBQU8sT0FBTyxDQXVEYjtBQXZERCxXQUFPLE9BQU8sRUFBQyxDQUFDO0lBU2RBLElBQWFBLGNBQWNBO1FBS3pCQyxnQkFBZ0JBO1FBQ2hCQSxTQU5XQSxjQUFjQTtZQUVqQkMsWUFBT0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEscUJBQWdCQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUt2QkEsa0JBQWFBLEdBQUdBLEVBQUNBLG1CQUFtQkEsRUFBR0EsU0FBU0EsRUFDckRBLDJCQUEyQkEsRUFBRUEsV0FBV0EsRUFDeENBLGVBQWVBLEVBQUdBLFVBQVVBLEVBQzVCQSxhQUFhQSxFQUFFQSxTQUFTQSxFQUFFQSxlQUFlQSxFQUFFQSxVQUFVQSxFQUNyREEsZUFBZUEsRUFBRUEsVUFBVUEsRUFBQ0EsQ0FBQ0E7UUFOaEJBLENBQUNBO1FBUWhCRCxrQ0FBU0EsR0FBVEEsVUFBV0EsU0FBaUJBLEVBQUVBLE1BQVdBO1lBQ3ZDRSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDNUJBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBO2dCQUNqQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFTQSxRQUFRQTtvQkFDL0MsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDeEIsQ0FBQyxDQUFDQSxDQUFDQTtZQUNMQSxDQUFDQTtRQUNIQSxDQUFDQTtRQUVERiwyQ0FBa0JBLEdBQWxCQSxVQUFtQkEsTUFBV0E7WUFDNUJHLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDckNBLENBQUNBO1FBRURILDJDQUFrQkEsR0FBbEJBO1FBRUFJLENBQUNBO1FBRURKLGtDQUFTQSxHQUFUQSxVQUFXQSxTQUFpQkE7WUFDMUJLLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUM1QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsU0FBU0EsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0EsT0FBT0EsRUFBTUEsQ0FBQ0EsQ0FBQUE7WUFDakRBLENBQUNBO1lBQUFBLENBQUNBO1lBQ0ZBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBLENBQUFBO1FBRWhDQSxDQUFDQTtRQUVETCxtQ0FBVUEsR0FBVkE7WUFDRU0sTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7UUFDdEJBLENBQUNBO1FBQ0hOLHFCQUFDQTtJQUFEQSxDQTFDQUQsQUEwQ0NDLElBQUFEO0lBMUNZQSxzQkFBY0EsR0FBZEEsY0EwQ1pBLENBQUFBO0lBRURBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLGVBQWVBLENBQUNBLENBQzlCQSxPQUFPQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLGNBQWNBLENBQUNBLENBQUFBO0FBQzVDQSxDQUFDQSxFQXZETSxPQUFPLEtBQVAsT0FBTyxRQXVEYiIsImZpbGUiOiJjb21tb25zL3N1YnNjcmlwdGlvbnMuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IG1tYXN1eWFtYSBvbiAxMC8yMi8yMDE1LlxyXG4gKi9cclxuXHJcblxyXG5tb2R1bGUgT25lc25hcCB7XHJcblxyXG5cclxuICBleHBvcnQgaW50ZXJmYWNlIElTdHJlYW1TZXJ2aWNlICB7XHJcbiAgICBzZXRTdHJlYW0oc3RyZWFtS2V5OiBzdHJpbmcsIHN0cmVhbTogYW55KVxyXG4gICAgZ2V0U3RyZWFtKHN0cmVhbUtleTogc3RyaW5nKVxyXG4gICAgZ2V0U3RyZWFtcygpXHJcbiAgfVxyXG5cclxuICBleHBvcnQgY2xhc3MgU3RyZWFtc1NlcnZpY2UgaW1wbGVtZW50cyBJU3RyZWFtU2VydmljZXtcclxuXHJcbiAgICBwcml2YXRlIHN0cmVhbXMgPSB7fTtcclxuICAgIHByaXZhdGUgZ2VuZXJhbExpc3RlbmVycyA9IFtdO1xyXG4gICAgXHJcbiAgICAvKiogQG5nSW5qZWN0ICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gICAgcHVibGljIGRlZmF1bHRFdmVudHMgPSB7J0NPTExFQ1RJT05fTE9BREVEJyA6ICdjbG9hZGVkJyxcclxuICAgICAgJ0NPTExFQ1RJT05fT0JKRUNUX1JFTU9WRUQnOiAnY29yZW1vdmVkJyxcclxuICAgICAgJ09CSkVDVF9DUkVBVEUnIDogJ29jcmVhdGVkJyxcclxuICAgICAgJ09CSkVDVF9MT0FEJzogJ29sb2FkZWQnLCAnT0JKRUNUX1VQREFURSc6ICdvdXBkYXRlZCcsXHJcbiAgICAgICdPQkpFQ1RfREVMRVRFJzogJ29kZWxldGVkJ307XHJcblxyXG4gICAgc2V0U3RyZWFtIChzdHJlYW1LZXk6IHN0cmluZywgc3RyZWFtOiBhbnkpIHtcclxuICAgICAgaWYoIXRoaXMuc3RyZWFtc1tzdHJlYW1LZXldKSB7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1zW3N0cmVhbUtleV0gPSBzdHJlYW07XHJcbiAgICAgICAgdGhpcy5nZW5lcmFsTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24obGlzdGVuZXIpIHtcclxuICAgICAgICBsaXN0ZW5lci5vbk5leHQoc3RyZWFtKTtcclxuICAgICAgICB9KTsgXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRHZW5lcmFsTGlzdGVuZXIodGhyZWFkOiBhbnkpIHtcclxuICAgICAgdGhpcy5nZW5lcmFsTGlzdGVuZXJzLnB1c2godGhyZWFkKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRHZW5lcmFsTGlzdGVuZXIgKCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRTdHJlYW0gKHN0cmVhbUtleTogc3RyaW5nKSB7XHJcbiAgICAgIGlmKCF0aGlzLnN0cmVhbXNbc3RyZWFtS2V5XSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RyZWFtKHN0cmVhbUtleSwgbmV3IFJ4LlN1YmplY3Q8e30+KCkpXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbXNbc3RyZWFtS2V5XVxyXG4gICAgICBcclxuICAgIH1cclxuXHJcbiAgICBnZXRTdHJlYW1zKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW1zO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBhbmd1bGFyLm1vZHVsZSgnc3ByaW5nVGVzdEFwcCcpXHJcbiAgLnNlcnZpY2UoJ1N0cmVhbXNTZXJ2aWNlJywgU3RyZWFtc1NlcnZpY2UpXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9