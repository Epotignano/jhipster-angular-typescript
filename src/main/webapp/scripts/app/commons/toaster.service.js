/**
 * Created by mmasuyama on 11/10/2015.
 */
/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="subscriptions.service.ts" />
var Onesnap;
(function (Onesnap) {
    var ToasterService = (function () {
        /** @ngInject */
        function ToasterService(StreamsService, $mdToast, $translate) {
            var _this = this;
            this.StreamsService = StreamsService;
            this.$mdToast = $mdToast;
            this.$translate = $translate;
            this.toasterStream = new Rx.Subject();
            this.observables = [];
            this.StreamsService.setGeneralListener(this.toasterStream);
            this.toasterStream.subscribe(function (observable) {
                _this.observables.push(observable);
                _this.streams = Rx.Observable.merge(_this.observables);
                _this.streams.subscribe(function (notification) {
                    _this.showToaster(notification, 'SUCCESS');
                });
            }, function (error) {
                _this.showToaster(error, 'ERROR');
            });
        }
        ToasterService.prototype.showToaster = function (notification, type) {
            switch (notification.type) {
                case (this.StreamsService.defaultEvents['OBJECT_UPDATE']):
                    this.$mdToast.showSimple(this.$translate.instant("COMMONS.UPDATE_" + type));
                    break;
                case ('Created'):
                    this.$mdToast.showSimple('Datos guardados correctamente (texto Hardcodeado)');
                    break;
                case (this.StreamsService.defaultEvents['OBJECT_DELETE']):
                    this.$mdToast.showSimple(this.$translate.instant("COMMONS.DELETE_" + type));
                    break;
            }
        };
        return ToasterService;
    })();
    Onesnap.ToasterService = ToasterService;
    angular.module('springTestApp').service('ToasterService', ToasterService);
})(Onesnap || (Onesnap = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbnMvdG9hc3Rlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIk9uZXNuYXAiLCJPbmVzbmFwLlRvYXN0ZXJTZXJ2aWNlIiwiT25lc25hcC5Ub2FzdGVyU2VydmljZS5jb25zdHJ1Y3RvciIsIk9uZXNuYXAuVG9hc3RlclNlcnZpY2Uuc2hvd1RvYXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBRUgsQUFHQSxrREFIa0Q7QUFDbEQsaURBQWlEO0FBRWpELElBQU8sT0FBTyxDQWtEYjtBQWxERCxXQUFPLE9BQU8sRUFBQyxDQUFDO0lBTWRBLElBQWFBLGNBQWNBO1FBTXpCQyxnQkFBZ0JBO1FBQ2hCQSxTQVBXQSxjQUFjQSxDQU9KQSxjQUFzQ0EsRUFBVUEsUUFBUUEsRUFBVUEsVUFBVUE7WUFQbkdDLGlCQXdDQ0E7WUFqQ3NCQSxtQkFBY0EsR0FBZEEsY0FBY0EsQ0FBd0JBO1lBQVVBLGFBQVFBLEdBQVJBLFFBQVFBLENBQUFBO1lBQVVBLGVBQVVBLEdBQVZBLFVBQVVBLENBQUFBO1lBQy9GQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQSxPQUFPQSxFQUFNQSxDQUFDQTtZQUMxQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDdEJBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7WUFFM0RBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLFNBQVNBLENBQUNBLFVBQUNBLFVBQVVBO2dCQUN0Q0EsS0FBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xDQSxLQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxFQUFFQSxDQUFDQSxVQUFVQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtnQkFDckRBLEtBQUlBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBLFVBQUNBLFlBQVlBO29CQUNsQ0EsS0FBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsWUFBWUEsRUFBRUEsU0FBU0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzVDQSxDQUFDQSxDQUFDQSxDQUFBQTtZQUNKQSxDQUFDQSxFQUFDQSxVQUFDQSxLQUFLQTtnQkFDTkEsS0FBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsS0FBS0EsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLENBQUNBLENBQUNBLENBQUNBO1FBQ0xBLENBQUNBO1FBRURELG9DQUFXQSxHQUFYQSxVQUFZQSxZQUFZQSxFQUFFQSxJQUFJQTtZQUU1QkUsTUFBTUEsQ0FBQUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3hCQSxLQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxhQUFhQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtvQkFDbERBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBLGlCQUFpQkEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzVFQSxLQUFLQSxDQUFDQTtnQkFDWkEsS0FBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7b0JBQ2JBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLG1EQUFtREEsQ0FBQ0EsQ0FBQ0E7b0JBQzlFQSxLQUFLQSxDQUFDQTtnQkFDUkEsS0FBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7b0JBQ3REQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxpQkFBaUJBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO29CQUM1RUEsS0FBS0EsQ0FBQ0E7WUFDVkEsQ0FBQ0E7UUFFSEEsQ0FBQ0E7UUFHSEYscUJBQUNBO0lBQURBLENBeENBRCxBQXdDQ0MsSUFBQUQ7SUF4Q1lBLHNCQUFjQSxHQUFkQSxjQXdDWkEsQ0FBQUE7SUFFREEsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FDOUJBLE9BQU9BLENBQUNBLGdCQUFnQkEsRUFBRUEsY0FBY0EsQ0FBQ0EsQ0FBQ0E7QUFDN0NBLENBQUNBLEVBbERNLE9BQU8sS0FBUCxPQUFPLFFBa0RiIiwiZmlsZSI6ImNvbW1vbnMvdG9hc3Rlci5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IG1tYXN1eWFtYSBvbiAxMS8xMC8yMDE1LlxuICovXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJzdWJzY3JpcHRpb25zLnNlcnZpY2UudHNcIiAvPlxuXG5tb2R1bGUgT25lc25hcCB7XG5cbiAgaW50ZXJmYWNlIElUb2FzdGVyIHtcbiAgICBzaG93VG9hc3Rlcihub3RpZmljYXRpb24sIHR5cGUpXG4gIH1cblxuICBleHBvcnQgY2xhc3MgVG9hc3RlclNlcnZpY2UgaW1wbGVtZW50cyBJVG9hc3RlcntcbiAgICBwcml2YXRlIHRvYXN0ZXJTdHJlYW07XG4gICAgcHJpdmF0ZSBhcnJheU9ic2VydjtcbiAgICBwcml2YXRlIHN0cmVhbXM7XG4gICAgcHJpdmF0ZSBvYnNlcnZhYmxlcztcblxuICAgIC8qKiBAbmdJbmplY3QgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlICBTdHJlYW1zU2VydmljZTogT25lc25hcC5TdHJlYW1zU2VydmljZSwgcHJpdmF0ZSAkbWRUb2FzdCwgcHJpdmF0ZSAkdHJhbnNsYXRlKSB7XG4gICAgICB0aGlzLnRvYXN0ZXJTdHJlYW0gPSBuZXcgUnguU3ViamVjdDx7fT4oKTtcbiAgICAgIHRoaXMub2JzZXJ2YWJsZXMgPSBbXTtcbiAgICAgIHRoaXMuU3RyZWFtc1NlcnZpY2Uuc2V0R2VuZXJhbExpc3RlbmVyKHRoaXMudG9hc3RlclN0cmVhbSk7XG5cbiAgICAgIHRoaXMudG9hc3RlclN0cmVhbS5zdWJzY3JpYmUoKG9ic2VydmFibGUpID0+IHtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlcy5wdXNoKG9ic2VydmFibGUpO1xuICAgICAgICB0aGlzLnN0cmVhbXMgPSBSeC5PYnNlcnZhYmxlLm1lcmdlKHRoaXMub2JzZXJ2YWJsZXMpO1xuICAgICAgICB0aGlzLnN0cmVhbXMuc3Vic2NyaWJlKChub3RpZmljYXRpb24pID0+IHtcbiAgICAgICAgICB0aGlzLnNob3dUb2FzdGVyKG5vdGlmaWNhdGlvbiwgJ1NVQ0NFU1MnKTtcbiAgICAgICAgfSlcbiAgICAgIH0sKGVycm9yKT0+IHtcbiAgICAgICAgdGhpcy5zaG93VG9hc3RlcihlcnJvciwgJ0VSUk9SJyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzaG93VG9hc3Rlcihub3RpZmljYXRpb24sIHR5cGUpe1xuICAgICAgXG4gICAgICBzd2l0Y2gobm90aWZpY2F0aW9uLnR5cGUpe1xuICAgICAgICBjYXNlKHRoaXMuU3RyZWFtc1NlcnZpY2UuZGVmYXVsdEV2ZW50c1snT0JKRUNUX1VQREFURSddKTpcbiAgICAgICAgICAgICAgdGhpcy4kbWRUb2FzdC5zaG93U2ltcGxlKHRoaXMuJHRyYW5zbGF0ZS5pbnN0YW50KFwiQ09NTU9OUy5VUERBVEVfXCIgKyB0eXBlKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlKCdDcmVhdGVkJyk6XG4gICAgICAgICAgdGhpcy4kbWRUb2FzdC5zaG93U2ltcGxlKCdEYXRvcyBndWFyZGFkb3MgY29ycmVjdGFtZW50ZSAodGV4dG8gSGFyZGNvZGVhZG8pJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UodGhpcy5TdHJlYW1zU2VydmljZS5kZWZhdWx0RXZlbnRzWydPQkpFQ1RfREVMRVRFJ10pOlxuICAgICAgICAgIHRoaXMuJG1kVG9hc3Quc2hvd1NpbXBsZSh0aGlzLiR0cmFuc2xhdGUuaW5zdGFudChcIkNPTU1PTlMuREVMRVRFX1wiICsgdHlwZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgfVxuICAgIFxuICAgXG4gIH1cbiAgXG4gIGFuZ3VsYXIubW9kdWxlKCdzcHJpbmdUZXN0QXBwJylcbiAgLnNlcnZpY2UoJ1RvYXN0ZXJTZXJ2aWNlJywgVG9hc3RlclNlcnZpY2UpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9