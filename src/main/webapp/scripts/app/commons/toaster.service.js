/**
 * Created by mmasuyama on 11/10/2015.
 */
/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="subscriptions.service.ts" />
var Onesnap;
(function (Onesnap) {
    var ToasterService = (function () {
        /** @ngInject */
        function ToasterService(StreamsService, $mdToast, $translate) {
            var _this = this;
            this.StreamsService = StreamsService;
            this.$mdToast = $mdToast;
            this.$translate = $translate;
            this.toasterStream = new Rx.Subject();
            this.observables = [];
            this.StreamsService.setGeneralListener(this.toasterStream);
            this.toasterStream.subscribe(function (observable) {
                _this.observables.push(observable);
                _this.streams = Rx.Observable.merge(_this.observables);
                _this.streams.subscribe(function (notification) {
                    _this.showToaster(notification, 'SUCCESS');
                });
            }, function (error) {
                _this.showToaster(error, 'ERROR');
            });
        }
        ToasterService.prototype.showToaster = function (notification, type) {
            switch (notification.EVENT) {
                case (this.StreamsService.defaultEvents['OBJECT_UPDATE']):
                    this.$mdToast.showSimple(this.$translate.instant("COMMONS.UPDATE_" + type));
                    break;
                case (this.StreamsService.defaultEvents['OBJECT_CREATE']):
                    this.$mdToast.showSimple(this.$translate.instant("COMMONS.SAVE_" + type));
                    break;
                case (this.StreamsService.defaultEvents['OBJECT_DELETE']):
                    this.$mdToast.showSimple(this.$translate.instant("COMMONS.DELETE_" + type));
                    break;
            }
        };
        return ToasterService;
    })();
    Onesnap.ToasterService = ToasterService;
    angular.module('springTestApp').service('ToasterService', ToasterService);
})(Onesnap || (Onesnap = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbnMvdG9hc3Rlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIk9uZXNuYXAiLCJPbmVzbmFwLlRvYXN0ZXJTZXJ2aWNlIiwiT25lc25hcC5Ub2FzdGVyU2VydmljZS5jb25zdHJ1Y3RvciIsIk9uZXNuYXAuVG9hc3RlclNlcnZpY2Uuc2hvd1RvYXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBRUgsQUFHQSxrREFIa0Q7QUFDbEQsaURBQWlEO0FBRWpELElBQU8sT0FBTyxDQWlEYjtBQWpERCxXQUFPLE9BQU8sRUFBQyxDQUFDO0lBTWRBLElBQWFBLGNBQWNBO1FBTXpCQyxnQkFBZ0JBO1FBQ2hCQSxTQVBXQSxjQUFjQSxDQU9KQSxjQUFzQ0EsRUFBVUEsUUFBUUEsRUFBVUEsVUFBVUE7WUFQbkdDLGlCQXVDQ0E7WUFoQ3NCQSxtQkFBY0EsR0FBZEEsY0FBY0EsQ0FBd0JBO1lBQVVBLGFBQVFBLEdBQVJBLFFBQVFBLENBQUFBO1lBQVVBLGVBQVVBLEdBQVZBLFVBQVVBLENBQUFBO1lBQy9GQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQSxPQUFPQSxFQUFNQSxDQUFDQTtZQUMxQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDdEJBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7WUFFM0RBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLFNBQVNBLENBQUNBLFVBQUNBLFVBQVVBO2dCQUN0Q0EsS0FBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xDQSxLQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxFQUFFQSxDQUFDQSxVQUFVQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtnQkFDckRBLEtBQUlBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBLFVBQUNBLFlBQVlBO29CQUNsQ0EsS0FBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsWUFBWUEsRUFBRUEsU0FBU0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzVDQSxDQUFDQSxDQUFDQSxDQUFBQTtZQUNKQSxDQUFDQSxFQUFDQSxVQUFDQSxLQUFLQTtnQkFDTkEsS0FBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsS0FBS0EsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLENBQUNBLENBQUNBLENBQUNBO1FBQ0xBLENBQUNBO1FBRURELG9DQUFXQSxHQUFYQSxVQUFZQSxZQUFZQSxFQUFFQSxJQUFJQTtZQUM1QkUsTUFBTUEsQ0FBQUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3pCQSxLQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxhQUFhQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtvQkFDbERBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBLGlCQUFpQkEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzVFQSxLQUFLQSxDQUFDQTtnQkFDWkEsS0FBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7b0JBQ3REQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDMUVBLEtBQUtBLENBQUNBO2dCQUNSQSxLQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxhQUFhQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtvQkFDdERBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBLGlCQUFpQkEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzVFQSxLQUFLQSxDQUFDQTtZQUNWQSxDQUFDQTtRQUVIQSxDQUFDQTtRQUdIRixxQkFBQ0E7SUFBREEsQ0F2Q0FELEFBdUNDQyxJQUFBRDtJQXZDWUEsc0JBQWNBLEdBQWRBLGNBdUNaQSxDQUFBQTtJQUVEQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUM5QkEsT0FBT0EsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxjQUFjQSxDQUFDQSxDQUFDQTtBQUM3Q0EsQ0FBQ0EsRUFqRE0sT0FBTyxLQUFQLE9BQU8sUUFpRGIiLCJmaWxlIjoiY29tbW9ucy90b2FzdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgbW1hc3V5YW1hIG9uIDExLzEwLzIwMTUuXG4gKi9cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInN1YnNjcmlwdGlvbnMuc2VydmljZS50c1wiIC8+XG5cbm1vZHVsZSBPbmVzbmFwIHtcblxuICBpbnRlcmZhY2UgSVRvYXN0ZXIge1xuICAgIHNob3dUb2FzdGVyKG5vdGlmaWNhdGlvbiwgdHlwZSlcbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBUb2FzdGVyU2VydmljZSBpbXBsZW1lbnRzIElUb2FzdGVye1xuICAgIHByaXZhdGUgdG9hc3RlclN0cmVhbTtcbiAgICBwcml2YXRlIGFycmF5T2JzZXJ2O1xuICAgIHByaXZhdGUgc3RyZWFtcztcbiAgICBwcml2YXRlIG9ic2VydmFibGVzO1xuXG4gICAgLyoqIEBuZ0luamVjdCAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgIFN0cmVhbXNTZXJ2aWNlOiBPbmVzbmFwLlN0cmVhbXNTZXJ2aWNlLCBwcml2YXRlICRtZFRvYXN0LCBwcml2YXRlICR0cmFuc2xhdGUpIHtcbiAgICAgIHRoaXMudG9hc3RlclN0cmVhbSA9IG5ldyBSeC5TdWJqZWN0PHt9PigpO1xuICAgICAgdGhpcy5vYnNlcnZhYmxlcyA9IFtdO1xuICAgICAgdGhpcy5TdHJlYW1zU2VydmljZS5zZXRHZW5lcmFsTGlzdGVuZXIodGhpcy50b2FzdGVyU3RyZWFtKTtcblxuICAgICAgdGhpcy50b2FzdGVyU3RyZWFtLnN1YnNjcmliZSgob2JzZXJ2YWJsZSkgPT4ge1xuICAgICAgICB0aGlzLm9ic2VydmFibGVzLnB1c2gob2JzZXJ2YWJsZSk7XG4gICAgICAgIHRoaXMuc3RyZWFtcyA9IFJ4Lk9ic2VydmFibGUubWVyZ2UodGhpcy5vYnNlcnZhYmxlcyk7XG4gICAgICAgIHRoaXMuc3RyZWFtcy5zdWJzY3JpYmUoKG5vdGlmaWNhdGlvbikgPT4ge1xuICAgICAgICAgIHRoaXMuc2hvd1RvYXN0ZXIobm90aWZpY2F0aW9uLCAnU1VDQ0VTUycpO1xuICAgICAgICB9KVxuICAgICAgfSwoZXJyb3IpPT4ge1xuICAgICAgICB0aGlzLnNob3dUb2FzdGVyKGVycm9yLCAnRVJST1InKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNob3dUb2FzdGVyKG5vdGlmaWNhdGlvbiwgdHlwZSl7XG4gICAgICBzd2l0Y2gobm90aWZpY2F0aW9uLkVWRU5UKXtcbiAgICAgICAgY2FzZSh0aGlzLlN0cmVhbXNTZXJ2aWNlLmRlZmF1bHRFdmVudHNbJ09CSkVDVF9VUERBVEUnXSk6XG4gICAgICAgICAgICAgIHRoaXMuJG1kVG9hc3Quc2hvd1NpbXBsZSh0aGlzLiR0cmFuc2xhdGUuaW5zdGFudChcIkNPTU1PTlMuVVBEQVRFX1wiICsgdHlwZSkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSh0aGlzLlN0cmVhbXNTZXJ2aWNlLmRlZmF1bHRFdmVudHNbJ09CSkVDVF9DUkVBVEUnXSk6XG4gICAgICAgICAgdGhpcy4kbWRUb2FzdC5zaG93U2ltcGxlKHRoaXMuJHRyYW5zbGF0ZS5pbnN0YW50KFwiQ09NTU9OUy5TQVZFX1wiICsgdHlwZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlKHRoaXMuU3RyZWFtc1NlcnZpY2UuZGVmYXVsdEV2ZW50c1snT0JKRUNUX0RFTEVURSddKTpcbiAgICAgICAgICB0aGlzLiRtZFRvYXN0LnNob3dTaW1wbGUodGhpcy4kdHJhbnNsYXRlLmluc3RhbnQoXCJDT01NT05TLkRFTEVURV9cIiArIHR5cGUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIH1cbiAgICBcbiAgIFxuICB9XG4gIFxuICBhbmd1bGFyLm1vZHVsZSgnc3ByaW5nVGVzdEFwcCcpXG4gIC5zZXJ2aWNlKCdUb2FzdGVyU2VydmljZScsIFRvYXN0ZXJTZXJ2aWNlKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==