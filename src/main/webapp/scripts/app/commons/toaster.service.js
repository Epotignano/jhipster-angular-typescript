/**
 * Created by mmasuyama on 11/10/2015.
 */
/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="subscriptions.service.ts" />
var Onesnap;
(function (Onesnap) {
    var Commons;
    (function (Commons) {
        var Streams;
        (function (Streams) {
            var ToasterService = (function () {
                /** @ngInject */
                function ToasterService(StreamsService, $mdToast, $translate) {
                    var _this = this;
                    this.StreamsService = StreamsService;
                    this.$mdToast = $mdToast;
                    this.$translate = $translate;
                    this.toasterStream = new Rx.Subject();
                    this.observables = [];
                    this.StreamsService.setGeneralListener(this.toasterStream);
                    this.toasterStream.subscribe(function (observable) {
                        _this.observables.push(observable);
                        _this.streams = Rx.Observable.merge(_this.observables);
                        _this.streams.subscribe(function (notification) {
                            _this.showToaster(notification, 'SUCCESS');
                        });
                    }, function (error) {
                        _this.showToaster(error, 'ERROR');
                    });
                }
                ToasterService.prototype.showToaster = function (notification, type) {
                    switch (notification.EVENT) {
                        case (this.StreamsService.defaultEvents['OBJECT_UPDATE']):
                            this.$mdToast.showSimple(this.$translate.instant("COMMONS.UPDATE_" + type));
                            break;
                        case (this.StreamsService.defaultEvents['OBJECT_CREATE']):
                            this.$mdToast.showSimple(this.$translate.instant("COMMONS.SAVE_" + type));
                            break;
                        case (this.StreamsService.defaultEvents['OBJECT_DELETE']):
                            this.$mdToast.showSimple(this.$translate.instant("COMMONS.DELETE_" + type));
                            break;
                    }
                };
                return ToasterService;
            })();
            Streams.ToasterService = ToasterService;
        })(Streams = Commons.Streams || (Commons.Streams = {}));
    })(Commons = Onesnap.Commons || (Onesnap.Commons = {}));
})(Onesnap || (Onesnap = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbnMvdG9hc3Rlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIk9uZXNuYXAiLCJPbmVzbmFwLkNvbW1vbnMiLCJPbmVzbmFwLkNvbW1vbnMuU3RyZWFtcyIsIk9uZXNuYXAuQ29tbW9ucy5TdHJlYW1zLlRvYXN0ZXJTZXJ2aWNlIiwiT25lc25hcC5Db21tb25zLlN0cmVhbXMuVG9hc3RlclNlcnZpY2UuY29uc3RydWN0b3IiLCJPbmVzbmFwLkNvbW1vbnMuU3RyZWFtcy5Ub2FzdGVyU2VydmljZS5zaG93VG9hc3RlciJdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFFSCxBQUdBLGtEQUhrRDtBQUNsRCxpREFBaUQ7QUFFakQsSUFBTyxPQUFPLENBNENiO0FBNUNELFdBQU8sT0FBTztJQUFDQSxJQUFBQSxPQUFPQSxDQTRDckJBO0lBNUNjQSxXQUFBQSxPQUFPQTtRQUFDQyxJQUFBQSxPQUFPQSxDQTRDN0JBO1FBNUNzQkEsV0FBQUEsT0FBT0EsRUFBQ0EsQ0FBQ0E7WUFNOUJDLElBQWFBLGNBQWNBO2dCQU16QkMsZ0JBQWdCQTtnQkFDaEJBLFNBUFdBLGNBQWNBLENBT0pBLGNBQXNEQSxFQUFVQSxRQUFRQSxFQUFVQSxVQUFVQTtvQkFQbkhDLGlCQXFDQ0E7b0JBOUJzQkEsbUJBQWNBLEdBQWRBLGNBQWNBLENBQXdDQTtvQkFBVUEsYUFBUUEsR0FBUkEsUUFBUUEsQ0FBQUE7b0JBQVVBLGVBQVVBLEdBQVZBLFVBQVVBLENBQUFBO29CQUMvR0EsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsSUFBSUEsRUFBRUEsQ0FBQ0EsT0FBT0EsRUFBTUEsQ0FBQ0E7b0JBQzFDQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxFQUFFQSxDQUFDQTtvQkFDdEJBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7b0JBRTNEQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFDQSxVQUFVQTt3QkFDdENBLEtBQUlBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO3dCQUNsQ0EsS0FBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsRUFBRUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7d0JBQ3JEQSxLQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFDQSxZQUFZQTs0QkFDbENBLEtBQUlBLENBQUNBLFdBQVdBLENBQUNBLFlBQVlBLEVBQUVBLFNBQVNBLENBQUNBLENBQUNBO3dCQUM1Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7b0JBQ0pBLENBQUNBLEVBQUNBLFVBQUNBLEtBQUtBO3dCQUNOQSxLQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxLQUFLQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtvQkFDbkNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNMQSxDQUFDQTtnQkFFREQsb0NBQVdBLEdBQVhBLFVBQVlBLFlBQVlBLEVBQUVBLElBQUlBO29CQUM1QkUsTUFBTUEsQ0FBQUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7d0JBQ3pCQSxLQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxhQUFhQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTs0QkFDbERBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBLGlCQUFpQkEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQzVFQSxLQUFLQSxDQUFDQTt3QkFDWkEsS0FBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7NEJBQ3REQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDMUVBLEtBQUtBLENBQUNBO3dCQUNSQSxLQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxhQUFhQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTs0QkFDdERBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBLGlCQUFpQkEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQzVFQSxLQUFLQSxDQUFDQTtvQkFDVkEsQ0FBQ0E7Z0JBRUhBLENBQUNBO2dCQUNIRixxQkFBQ0E7WUFBREEsQ0FyQ0FELEFBcUNDQyxJQUFBRDtZQXJDWUEsc0JBQWNBLEdBQWRBLGNBcUNaQSxDQUFBQTtRQUNIQSxDQUFDQSxFQTVDc0JELE9BQU9BLEdBQVBBLGVBQU9BLEtBQVBBLGVBQU9BLFFBNEM3QkE7SUFBREEsQ0FBQ0EsRUE1Q2NELE9BQU9BLEdBQVBBLGVBQU9BLEtBQVBBLGVBQU9BLFFBNENyQkE7QUFBREEsQ0FBQ0EsRUE1Q00sT0FBTyxLQUFQLE9BQU8sUUE0Q2IiLCJmaWxlIjoiY29tbW9ucy90b2FzdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgbW1hc3V5YW1hIG9uIDExLzEwLzIwMTUuXG4gKi9cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInN1YnNjcmlwdGlvbnMuc2VydmljZS50c1wiIC8+XG5cbm1vZHVsZSBPbmVzbmFwLkNvbW1vbnMuU3RyZWFtcyB7XG5cbiAgaW50ZXJmYWNlIElUb2FzdGVyIHtcbiAgICBzaG93VG9hc3Rlcihub3RpZmljYXRpb24sIHR5cGUpXG4gIH1cblxuICBleHBvcnQgY2xhc3MgVG9hc3RlclNlcnZpY2UgaW1wbGVtZW50cyBJVG9hc3RlcntcbiAgICBwcml2YXRlIHRvYXN0ZXJTdHJlYW07XG4gICAgcHJpdmF0ZSBhcnJheU9ic2VydjtcbiAgICBwcml2YXRlIHN0cmVhbXM7XG4gICAgcHJpdmF0ZSBvYnNlcnZhYmxlcztcblxuICAgIC8qKiBAbmdJbmplY3QgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlICBTdHJlYW1zU2VydmljZTogT25lc25hcC5Db21tb25zLlN0cmVhbXMuU3RyZWFtc1NlcnZpY2UsIHByaXZhdGUgJG1kVG9hc3QsIHByaXZhdGUgJHRyYW5zbGF0ZSkge1xuICAgICAgdGhpcy50b2FzdGVyU3RyZWFtID0gbmV3IFJ4LlN1YmplY3Q8e30+KCk7XG4gICAgICB0aGlzLm9ic2VydmFibGVzID0gW107XG4gICAgICB0aGlzLlN0cmVhbXNTZXJ2aWNlLnNldEdlbmVyYWxMaXN0ZW5lcih0aGlzLnRvYXN0ZXJTdHJlYW0pO1xuXG4gICAgICB0aGlzLnRvYXN0ZXJTdHJlYW0uc3Vic2NyaWJlKChvYnNlcnZhYmxlKSA9PiB7XG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZXMucHVzaChvYnNlcnZhYmxlKTtcbiAgICAgICAgdGhpcy5zdHJlYW1zID0gUnguT2JzZXJ2YWJsZS5tZXJnZSh0aGlzLm9ic2VydmFibGVzKTtcbiAgICAgICAgdGhpcy5zdHJlYW1zLnN1YnNjcmliZSgobm90aWZpY2F0aW9uKSA9PiB7XG4gICAgICAgICAgdGhpcy5zaG93VG9hc3Rlcihub3RpZmljYXRpb24sICdTVUNDRVNTJyk7XG4gICAgICAgIH0pXG4gICAgICB9LChlcnJvcik9PiB7XG4gICAgICAgIHRoaXMuc2hvd1RvYXN0ZXIoZXJyb3IsICdFUlJPUicpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvd1RvYXN0ZXIobm90aWZpY2F0aW9uLCB0eXBlKXtcbiAgICAgIHN3aXRjaChub3RpZmljYXRpb24uRVZFTlQpe1xuICAgICAgICBjYXNlKHRoaXMuU3RyZWFtc1NlcnZpY2UuZGVmYXVsdEV2ZW50c1snT0JKRUNUX1VQREFURSddKTpcbiAgICAgICAgICAgICAgdGhpcy4kbWRUb2FzdC5zaG93U2ltcGxlKHRoaXMuJHRyYW5zbGF0ZS5pbnN0YW50KFwiQ09NTU9OUy5VUERBVEVfXCIgKyB0eXBlKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlKHRoaXMuU3RyZWFtc1NlcnZpY2UuZGVmYXVsdEV2ZW50c1snT0JKRUNUX0NSRUFURSddKTpcbiAgICAgICAgICB0aGlzLiRtZFRvYXN0LnNob3dTaW1wbGUodGhpcy4kdHJhbnNsYXRlLmluc3RhbnQoXCJDT01NT05TLlNBVkVfXCIgKyB0eXBlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UodGhpcy5TdHJlYW1zU2VydmljZS5kZWZhdWx0RXZlbnRzWydPQkpFQ1RfREVMRVRFJ10pOlxuICAgICAgICAgIHRoaXMuJG1kVG9hc3Quc2hvd1NpbXBsZSh0aGlzLiR0cmFuc2xhdGUuaW5zdGFudChcIkNPTU1PTlMuREVMRVRFX1wiICsgdHlwZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgfVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=