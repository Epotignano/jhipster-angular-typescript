/// <reference path="commons/subscriptions.service.ts" />
/// <reference path="../../typings/tsd.d.ts" />
var Onesnap;
(function (Onesnap) {
    var RXInterceptor = (function () {
        function RXInterceptor(StreamsService) {
            this.StreamsService = StreamsService;
            this.response = function (response) {
                if ((response.status === 200 || response.status === 201) && typeof response.data !== 'string' && response.config.url.indexOf('api') !== -1) {
                    var _service = StreamsService;
                    var _stream = _service.getStream(response.config.url);
                    if (!_stream) {
                        _service.setStream(response.config.url, new Rx.Subject());
                        _stream = _service.getStream(response.config.url);
                    }
                    _stream.onNext({ type: response.statusText, data: response.data });
                }
                return response;
            };
            return;
        }
        RXInterceptor.$inject = ['StreamsService'];
        return RXInterceptor;
    })();
    Onesnap.RXInterceptor = RXInterceptor;
    function getInstance(StreamsService) {
        return new RXInterceptor(StreamsService);
    }
    Onesnap.getInstance = getInstance;
    angular.module('springTestApp').factory('rxInterceptorFactory', getInstance);
})(Onesnap || (Onesnap = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmludGVyY2VwdG9ycy50cyJdLCJuYW1lcyI6WyJPbmVzbmFwIiwiT25lc25hcC5SWEludGVyY2VwdG9yIiwiT25lc25hcC5SWEludGVyY2VwdG9yLmNvbnN0cnVjdG9yIiwiT25lc25hcC5nZXRJbnN0YW5jZSJdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELCtDQUErQztBQUUvQyxJQUFPLE9BQU8sQ0FrQ2I7QUFsQ0QsV0FBTyxPQUFPLEVBQUMsQ0FBQztJQUVmQSxJQUFhQSxhQUFhQTtRQUV6QkMsU0FGWUEsYUFBYUEsQ0FFTEEsY0FBc0NBO1lBQXRDQyxtQkFBY0EsR0FBZEEsY0FBY0EsQ0FBd0JBO1lBQ3pEQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxVQUFDQSxRQUFRQTtnQkFDekJBLEVBQUVBLENBQUNBLENBQUVBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLEtBQUtBLEdBQUdBLElBQUlBLFFBQVFBLENBQUNBLE1BQU1BLEtBQUtBLEdBQUdBLENBQUNBLElBQ3REQSxPQUFPQSxRQUFRQSxDQUFDQSxJQUFJQSxLQUFLQSxRQUFRQSxJQUNwQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzNDQSxJQUFJQSxRQUFRQSxHQUFHQSxjQUFjQSxDQUFDQTtvQkFDOUJBLElBQUlBLE9BQU9BLEdBQUdBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO29CQUN0REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ2RBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLEVBQUVBLENBQUNBLE9BQU9BLEVBQU1BLENBQUNBLENBQUFBO3dCQUM3REEsT0FBT0EsR0FBR0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQUE7b0JBQ2xEQSxDQUFDQTtvQkFDREEsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBQ0EsSUFBSUEsRUFBRUEsUUFBUUEsQ0FBQ0EsVUFBVUEsRUFBRUEsSUFBSUEsRUFBRUEsUUFBUUEsQ0FBQ0EsSUFBSUEsRUFBQ0EsQ0FBQ0EsQ0FBQUE7Z0JBQ2pFQSxDQUFDQTtnQkFDREEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQUE7WUFDaEJBLENBQUNBLENBQUFBO1lBRUFBLE1BQU1BLENBQUNBO1FBQ1JBLENBQUNBO1FBbEJNRCxxQkFBT0EsR0FBa0JBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0E7UUFvQnBEQSxvQkFBQ0E7SUFBREEsQ0FyQkFELEFBcUJDQyxJQUFBRDtJQXJCWUEscUJBQWFBLEdBQWJBLGFBcUJaQSxDQUFBQTtJQUdEQSxTQUFnQkEsV0FBV0EsQ0FBQ0EsY0FBc0NBO1FBQ2pFRyxNQUFNQSxDQUFDQSxJQUFJQSxhQUFhQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFBQTtJQUN6Q0EsQ0FBQ0E7SUFGZUgsbUJBQVdBLEdBQVhBLFdBRWZBLENBQUFBO0lBR0RBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLGVBQWVBLENBQUNBLENBQzdCQSxPQUFPQSxDQUFDQSxzQkFBc0JBLEVBQUVBLFdBQVdBLENBQUNBLENBQUNBO0FBRWhEQSxDQUFDQSxFQWxDTSxPQUFPLEtBQVAsT0FBTyxRQWtDYiIsImZpbGUiOiJpbmRleC5pbnRlcmNlcHRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiY29tbW9ucy9zdWJzY3JpcHRpb25zLnNlcnZpY2UudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XHJcblxyXG5tb2R1bGUgT25lc25hcCB7XHJcblxyXG5cdGV4cG9ydCBjbGFzcyBSWEludGVyY2VwdG9yIHtcclxuXHRcdHN0YXRpYyAkaW5qZWN0OiBBcnJheTxzdHJpbmc+ID0gWydTdHJlYW1zU2VydmljZSddO1xyXG5cdFx0Y29uc3RydWN0b3IocHJpdmF0ZSBTdHJlYW1zU2VydmljZTogT25lc25hcC5TdHJlYW1zU2VydmljZSkge1xyXG5cdFx0XHR0aGlzLnJlc3BvbnNlID0gKHJlc3BvbnNlKSA9PiB7XHJcblx0XHRcdGlmICggKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwIHx8IHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAxKSBcclxuXHRcdFx0JiYgdHlwZW9mIHJlc3BvbnNlLmRhdGEgIT09ICdzdHJpbmcnICYmIFxyXG5cdFx0XHRyZXNwb25zZS5jb25maWcudXJsLmluZGV4T2YoJ2FwaScpICE9PSAtMSkge1xyXG5cdFx0XHRcdHZhciBfc2VydmljZSA9IFN0cmVhbXNTZXJ2aWNlO1xyXG5cdFx0XHRcdHZhciBfc3RyZWFtID0gX3NlcnZpY2UuZ2V0U3RyZWFtKHJlc3BvbnNlLmNvbmZpZy51cmwpO1xyXG5cdFx0XHRcdGlmICghX3N0cmVhbSkge1xyXG5cdFx0XHRcdFx0X3NlcnZpY2Uuc2V0U3RyZWFtKHJlc3BvbnNlLmNvbmZpZy51cmwsIG5ldyBSeC5TdWJqZWN0PHt9PigpKVxyXG5cdFx0XHRcdFx0X3N0cmVhbSA9IF9zZXJ2aWNlLmdldFN0cmVhbShyZXNwb25zZS5jb25maWcudXJsKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRfc3RyZWFtLm9uTmV4dCh7dHlwZTogcmVzcG9uc2Uuc3RhdHVzVGV4dCwgZGF0YTogcmVzcG9uc2UuZGF0YX0pXHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlXHJcblx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRyZXNwb25zZSA6IChyZXNwb25zZSkgPT4gdm9pZDtcdFxyXG5cdH1cclxuXHJcblxyXG5cdGV4cG9ydCBmdW5jdGlvbiBnZXRJbnN0YW5jZShTdHJlYW1zU2VydmljZTogT25lc25hcC5TdHJlYW1zU2VydmljZSkge1xyXG5cdFx0cmV0dXJuIG5ldyBSWEludGVyY2VwdG9yKFN0cmVhbXNTZXJ2aWNlKVxyXG5cdH1cclxuXHJcblxyXG5cdGFuZ3VsYXIubW9kdWxlKCdzcHJpbmdUZXN0QXBwJylcclxuXHRcdC5mYWN0b3J5KCdyeEludGVyY2VwdG9yRmFjdG9yeScsIGdldEluc3RhbmNlKTtcclxuXHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=