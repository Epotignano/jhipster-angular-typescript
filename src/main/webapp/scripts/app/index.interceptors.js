/// <reference path="commons/subscriptions.service.ts" />
/// <reference path="../../typings/tsd.d.ts" />
var Onesnap;
(function (Onesnap) {
    var RXInterceptor = (function () {
        function RXInterceptor(StreamsService) {
            this.StreamsService = StreamsService;
            this.response = function (response) {
                if ((response.status === 200 || response.status === 201) && typeof response.data !== 'string' && response.config.url.indexOf('api') !== -1) {
                    var _service = StreamsService;
                    var _stream = _service.getStream(response.config.url);
                    _stream.onNext({ type: response.statusText, data: response.data });
                }
                return response;
            };
            return;
        }
        RXInterceptor.$inject = ['StreamsService'];
        return RXInterceptor;
    })();
    Onesnap.RXInterceptor = RXInterceptor;
    function getInstance(StreamsService) {
        return new RXInterceptor(StreamsService);
    }
    Onesnap.getInstance = getInstance;
    angular.module('springTestApp').factory('rxInterceptorFactory', getInstance);
})(Onesnap || (Onesnap = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmludGVyY2VwdG9ycy50cyJdLCJuYW1lcyI6WyJPbmVzbmFwIiwiT25lc25hcC5SWEludGVyY2VwdG9yIiwiT25lc25hcC5SWEludGVyY2VwdG9yLmNvbnN0cnVjdG9yIiwiT25lc25hcC5nZXRJbnN0YW5jZSJdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELCtDQUErQztBQUUvQyxJQUFPLE9BQU8sQ0E4QmI7QUE5QkQsV0FBTyxPQUFPLEVBQUMsQ0FBQztJQUVmQSxJQUFhQSxhQUFhQTtRQUV6QkMsU0FGWUEsYUFBYUEsQ0FFTEEsY0FBc0NBO1lBQXRDQyxtQkFBY0EsR0FBZEEsY0FBY0EsQ0FBd0JBO1lBQ3pEQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxVQUFDQSxRQUFRQTtnQkFDekJBLEVBQUVBLENBQUNBLENBQUVBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLEtBQUtBLEdBQUdBLElBQUlBLFFBQVFBLENBQUNBLE1BQU1BLEtBQUtBLEdBQUdBLENBQUNBLElBQ3REQSxPQUFPQSxRQUFRQSxDQUFDQSxJQUFJQSxLQUFLQSxRQUFRQSxJQUNwQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzNDQSxJQUFJQSxRQUFRQSxHQUFHQSxjQUFjQSxDQUFDQTtvQkFDOUJBLElBQUlBLE9BQU9BLEdBQUdBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO29CQUN0REEsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBQ0EsSUFBSUEsRUFBRUEsUUFBUUEsQ0FBQ0EsVUFBVUEsRUFBRUEsSUFBSUEsRUFBRUEsUUFBUUEsQ0FBQ0EsSUFBSUEsRUFBQ0EsQ0FBQ0EsQ0FBQUE7Z0JBQ2pFQSxDQUFDQTtnQkFDREEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQUE7WUFDaEJBLENBQUNBLENBQUFBO1lBRUFBLE1BQU1BLENBQUNBO1FBQ1JBLENBQUNBO1FBZE1ELHFCQUFPQSxHQUFrQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxDQUFDQTtRQWdCcERBLG9CQUFDQTtJQUFEQSxDQWpCQUQsQUFpQkNDLElBQUFEO0lBakJZQSxxQkFBYUEsR0FBYkEsYUFpQlpBLENBQUFBO0lBR0RBLFNBQWdCQSxXQUFXQSxDQUFDQSxjQUFzQ0E7UUFDakVHLE1BQU1BLENBQUNBLElBQUlBLGFBQWFBLENBQUNBLGNBQWNBLENBQUNBLENBQUFBO0lBQ3pDQSxDQUFDQTtJQUZlSCxtQkFBV0EsR0FBWEEsV0FFZkEsQ0FBQUE7SUFHREEsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FDN0JBLE9BQU9BLENBQUNBLHNCQUFzQkEsRUFBRUEsV0FBV0EsQ0FBQ0EsQ0FBQ0E7QUFFaERBLENBQUNBLEVBOUJNLE9BQU8sS0FBUCxPQUFPLFFBOEJiIiwiZmlsZSI6ImluZGV4LmludGVyY2VwdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJjb21tb25zL3N1YnNjcmlwdGlvbnMuc2VydmljZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cclxuXHJcbm1vZHVsZSBPbmVzbmFwIHtcclxuXHJcblx0ZXhwb3J0IGNsYXNzIFJYSW50ZXJjZXB0b3Ige1xyXG5cdFx0c3RhdGljICRpbmplY3Q6IEFycmF5PHN0cmluZz4gPSBbJ1N0cmVhbXNTZXJ2aWNlJ107XHJcblx0XHRjb25zdHJ1Y3Rvcihwcml2YXRlIFN0cmVhbXNTZXJ2aWNlOiBPbmVzbmFwLlN0cmVhbXNTZXJ2aWNlKSB7XHJcblx0XHRcdHRoaXMucmVzcG9uc2UgPSAocmVzcG9uc2UpID0+IHtcclxuXHRcdFx0aWYgKCAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDAgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSAyMDEpIFxyXG5cdFx0XHQmJiB0eXBlb2YgcmVzcG9uc2UuZGF0YSAhPT0gJ3N0cmluZycgJiYgXHJcblx0XHRcdHJlc3BvbnNlLmNvbmZpZy51cmwuaW5kZXhPZignYXBpJykgIT09IC0xKSB7XHJcblx0XHRcdFx0dmFyIF9zZXJ2aWNlID0gU3RyZWFtc1NlcnZpY2U7XHJcblx0XHRcdFx0dmFyIF9zdHJlYW0gPSBfc2VydmljZS5nZXRTdHJlYW0ocmVzcG9uc2UuY29uZmlnLnVybCk7XHJcblx0XHRcdFx0X3N0cmVhbS5vbk5leHQoe3R5cGU6IHJlc3BvbnNlLnN0YXR1c1RleHQsIGRhdGE6IHJlc3BvbnNlLmRhdGF9KVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXNwb25zZVxyXG5cdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0cmVzcG9uc2UgOiAocmVzcG9uc2UpID0+IHZvaWQ7XHRcclxuXHR9XHJcblxyXG5cclxuXHRleHBvcnQgZnVuY3Rpb24gZ2V0SW5zdGFuY2UoU3RyZWFtc1NlcnZpY2U6IE9uZXNuYXAuU3RyZWFtc1NlcnZpY2UpIHtcclxuXHRcdHJldHVybiBuZXcgUlhJbnRlcmNlcHRvcihTdHJlYW1zU2VydmljZSlcclxuXHR9XHJcblxyXG5cclxuXHRhbmd1bGFyLm1vZHVsZSgnc3ByaW5nVGVzdEFwcCcpXHJcblx0XHQuZmFjdG9yeSgncnhJbnRlcmNlcHRvckZhY3RvcnknLCBnZXRJbnN0YW5jZSk7XHJcblxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9