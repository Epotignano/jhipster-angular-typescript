/// <reference path="commons/subscriptions.service.ts" />
/// <reference path="../../typings/tsd.d.ts" />
var Onesnap;
(function (Onesnap) {
    var RXInterceptor = (function () {
        function RXInterceptor(StreamsService) {
            this.StreamsService = StreamsService;
            return;
        }
        RXInterceptor.prototype.response = function (response) {
            console.log(response.data.path);
            if (response.data.path && response.status == 200) {
                var _stream = this.StreamsService.getStream(response.data.path);
                if (!_stream) {
                    this.StreamsService.setStream(response.data.path, new Rx.Subject());
                    _stream = this.StreamsService.getStream(response.data.path);
                }
                _stream.onNext({ type: response.method, data: response.data });
            }
            return response;
        };
        return RXInterceptor;
    })();
    Onesnap.RXInterceptor = RXInterceptor;
    function getInstance(StreamsService) {
        return new RXInterceptor(StreamsService);
    }
    Onesnap.getInstance = getInstance;
    angular.module('springTestApp').factory('rxInterceptorFactory', getInstance);
})(Onesnap || (Onesnap = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmludGVyY2VwdG9ycy50cyJdLCJuYW1lcyI6WyJPbmVzbmFwIiwiT25lc25hcC5SWEludGVyY2VwdG9yIiwiT25lc25hcC5SWEludGVyY2VwdG9yLmNvbnN0cnVjdG9yIiwiT25lc25hcC5SWEludGVyY2VwdG9yLnJlc3BvbnNlIiwiT25lc25hcC5nZXRJbnN0YW5jZSJdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELCtDQUErQztBQUUvQyxJQUFPLE9BQU8sQ0E4QmI7QUE5QkQsV0FBTyxPQUFPLEVBQUMsQ0FBQztJQUVmQSxJQUFhQSxhQUFhQTtRQUN6QkMsU0FEWUEsYUFBYUEsQ0FDTEEsY0FBc0NBO1lBQXRDQyxtQkFBY0EsR0FBZEEsY0FBY0EsQ0FBd0JBO1lBQ3pEQSxNQUFNQSxDQUFDQTtRQUNSQSxDQUFDQTtRQUNERCxnQ0FBUUEsR0FBUkEsVUFBU0EsUUFBUUE7WUFDaEJFLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ2hDQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxJQUFJQSxRQUFRQSxDQUFDQSxNQUFNQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbERBLElBQUlBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNoRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2RBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLEVBQUVBLENBQUNBLE9BQU9BLEVBQU1BLENBQUNBLENBQUFBO29CQUN2RUEsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQUE7Z0JBQzVEQSxDQUFDQTtnQkFDREEsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBQ0EsSUFBSUEsRUFBRUEsUUFBUUEsQ0FBQ0EsTUFBTUEsRUFBRUEsSUFBSUEsRUFBRUEsUUFBUUEsQ0FBQ0EsSUFBSUEsRUFBQ0EsQ0FBQ0EsQ0FBQUE7WUFDN0RBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLFFBQVFBLENBQUFBO1FBQ2hCQSxDQUFDQTtRQUNGRixvQkFBQ0E7SUFBREEsQ0FqQkFELEFBaUJDQyxJQUFBRDtJQWpCWUEscUJBQWFBLEdBQWJBLGFBaUJaQSxDQUFBQTtJQUdEQSxTQUFnQkEsV0FBV0EsQ0FBQ0EsY0FBc0NBO1FBQ2pFSSxNQUFNQSxDQUFDQSxJQUFJQSxhQUFhQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFBQTtJQUN6Q0EsQ0FBQ0E7SUFGZUosbUJBQVdBLEdBQVhBLFdBRWZBLENBQUFBO0lBR0RBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLGVBQWVBLENBQUNBLENBQzdCQSxPQUFPQSxDQUFDQSxzQkFBc0JBLEVBQUVBLFdBQVdBLENBQUNBLENBQUNBO0FBRWhEQSxDQUFDQSxFQTlCTSxPQUFPLEtBQVAsT0FBTyxRQThCYiIsImZpbGUiOiJpbmRleC5pbnRlcmNlcHRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiY29tbW9ucy9zdWJzY3JpcHRpb25zLnNlcnZpY2UudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XHJcblxyXG5tb2R1bGUgT25lc25hcCB7XHJcblxyXG5cdGV4cG9ydCBjbGFzcyBSWEludGVyY2VwdG9yIHtcclxuXHRcdGNvbnN0cnVjdG9yKHByaXZhdGUgU3RyZWFtc1NlcnZpY2U6IE9uZXNuYXAuU3RyZWFtc1NlcnZpY2UpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0cmVzcG9uc2UocmVzcG9uc2UpIHtcclxuXHRcdFx0Y29uc29sZS5sb2cocmVzcG9uc2UuZGF0YS5wYXRoKTtcclxuXHRcdFx0aWYgKHJlc3BvbnNlLmRhdGEucGF0aCAmJiByZXNwb25zZS5zdGF0dXMgPT0gMjAwKSB7XHJcblx0XHRcdFx0dmFyIF9zdHJlYW0gPSB0aGlzLlN0cmVhbXNTZXJ2aWNlLmdldFN0cmVhbShyZXNwb25zZS5kYXRhLnBhdGgpO1xyXG5cdFx0XHRcdGlmICghX3N0cmVhbSkge1xyXG5cdFx0XHRcdFx0dGhpcy5TdHJlYW1zU2VydmljZS5zZXRTdHJlYW0ocmVzcG9uc2UuZGF0YS5wYXRoLCBuZXcgUnguU3ViamVjdDx7fT4oKSlcclxuXHRcdFx0XHRcdF9zdHJlYW0gPSB0aGlzLlN0cmVhbXNTZXJ2aWNlLmdldFN0cmVhbShyZXNwb25zZS5kYXRhLnBhdGgpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdF9zdHJlYW0ub25OZXh0KHt0eXBlOiByZXNwb25zZS5tZXRob2QsIGRhdGE6IHJlc3BvbnNlLmRhdGF9KVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxuXHRleHBvcnQgZnVuY3Rpb24gZ2V0SW5zdGFuY2UoU3RyZWFtc1NlcnZpY2U6IE9uZXNuYXAuU3RyZWFtc1NlcnZpY2UpIHtcclxuXHRcdHJldHVybiBuZXcgUlhJbnRlcmNlcHRvcihTdHJlYW1zU2VydmljZSlcclxuXHR9XHJcblxyXG5cclxuXHRhbmd1bGFyLm1vZHVsZSgnc3ByaW5nVGVzdEFwcCcpXHJcblx0XHQuZmFjdG9yeSgncnhJbnRlcmNlcHRvckZhY3RvcnknLCBnZXRJbnN0YW5jZSk7XHJcblxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9